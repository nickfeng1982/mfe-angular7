"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const build_angular_1 = require("@angular-devkit/build-angular");
const webpackMerge = require("webpack-merge");
class SingleSpaBrowserBuilder extends build_angular_1.BrowserBuilder {
    constructor(context) {
        super(context);
    }
    buildWebpackConfig(root, projectRoot, host, options) {
        const libraryName = options.libraryName || this.context.targetSpecifier && this.context.targetSpecifier.project;
        // Disable es2015 polyfills
        // tslint:disable-next-line: max-line-length
        // https://github.com/angular/angular-cli/blob/3d8064bb64d72557474a7484f1b85eaf35788916/packages/angular_devkit/build_angular/src/angular-cli-files/models/webpack-configs/common.ts#L56
        options.es5BrowserSupport = false;
        // Generate Angular CLI's default Browser Webpack cofiguration
        const config = super.buildWebpackConfig(root, projectRoot, host, options);
        // Remove bundles
        delete config.entry.polyfills;
        delete config.entry.styles;
        delete config.optimization.runtimeChunk;
        delete config.optimization.splitChunks;
        // Remove Angular's IndexHtmlWebpackPlugin from build
        const indexHtmlWebpackPluginIndex = config.plugins.findIndex(plugin => plugin.constructor.name === 'IndexHtmlWebpackPlugin');
        if (indexHtmlWebpackPluginIndex > -1) {
            config.plugins.splice(indexHtmlWebpackPluginIndex, 1);
        }
        return webpackMerge.smart(config, {
            output: {
                library: libraryName,
                libraryTarget: options.libraryTarget,
            },
            externals: {
                'zone.js': 'Zone',
            },
        });
    }
}
exports.SingleSpaBrowserBuilder = SingleSpaBrowserBuilder;
exports.default = SingleSpaBrowserBuilder;
//# sourceMappingURL=index.js.map